<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>cloxnu&#39;s Creative Space</title>
        <link>https://clox.nu/</link>
        <description>Recent content on cloxnu&#39;s Creative Space</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 01 Jan 2022 00:00:00 +0800</lastBuildDate>
        
        <atom:link href="https://clox.nu/index.xml" rel="self" type="application/rss+xml" />
        
        
        <item>
            <title>happy new year</title>
            <link>https://clox.nu/news/2022/01/01/happy-new-year/</link>
            <pubDate>Sat, 01 Jan 2022 00:00:00 +0800</pubDate>
            
            <guid>https://clox.nu/news/2022/01/01/happy-new-year/</guid>
            <description>&lt;p&gt;2022，希望新的一年有更好的自己。&lt;/p&gt;
&lt;p&gt;宝可梦跨年&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>续费域名 clox.nu</title>
            <link>https://clox.nu/news/2021/12/14/renew-domain-clox-nu/</link>
            <pubDate>Tue, 14 Dec 2021 16:13:00 +0800</pubDate>
            
            <guid>https://clox.nu/news/2021/12/14/renew-domain-clox-nu/</guid>
            <description>&lt;p&gt;续费域名 clox.nu 到 2023 年 1 月&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_2.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>购买 Typora</title>
            <link>https://clox.nu/news/2021/11/30/buy-typora/</link>
            <pubDate>Tue, 30 Nov 2021 13:40:00 +0800</pubDate>
            
            <guid>https://clox.nu/news/2021/11/30/buy-typora/</guid>
            <description>&lt;p&gt;前两天 Typora 收费了，为了避免以后会变成订阅制，我这个 markdown 重度用户就赶快买了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_1.png&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_2.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Telegram Bot 简明教程 II - 收指令与指令键盘</title>
            <link>https://clox.nu/blog/brief-tutorial-on-telegram-bot-ii/</link>
            <pubDate>Wed, 17 Nov 2021 22:30:00 +0800</pubDate>
            
            <guid>https://clox.nu/blog/brief-tutorial-on-telegram-bot-ii/</guid>
            <description>&lt;h2 id=&#34;在此之前&#34;&gt;在此之前&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../brief-tutorial-on-telegram-bot-i/&#34;&gt;Telegram Bot 简明教程 I - 注册与发消息&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;收指令&#34;&gt;收指令&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/python-telegram-bot/python-telegram-bot/wiki/Extensions-%E2%80%93-Your-first-Bot&#34;&gt;python-telegram-bot wiki 页面&lt;/a&gt; 介绍了如何使用 Python 脚本实现与 Bot 交互。&lt;/p&gt;
&lt;p&gt;以下是根据这个 wiki 页面编写的例程。&lt;/p&gt;
&lt;h3 id=&#34;接收-start-指令&#34;&gt;接收 &lt;code&gt;/start&lt;/code&gt; 指令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; telegram &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Update
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; telegram.ext &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Updater, CallbackContext, CommandHandler

token &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2110628450:AAHQ78uj42ddtdsx0gKfaZGyFUhpnQ13vyM&amp;#39;&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;(update: Update, context: CallbackContext):
    context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_message(chat_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;update&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;effective_chat&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id, text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Let&amp;#39;s start!&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# 或&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# update.message.reply_text(&amp;#34;Let&amp;#39;s start!&amp;#34;)&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    updater &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Updater(token&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;token, use_context&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#1&lt;/span&gt;
    start_handler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CommandHandler(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;, start) &lt;span style=&#34;color:#75715e&#34;&gt;#2&lt;/span&gt;
    updater&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dispatcher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_handler(start_handler) &lt;span style=&#34;color:#75715e&#34;&gt;#3&lt;/span&gt;
    updater&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start_polling() &lt;span style=&#34;color:#75715e&#34;&gt;#4&lt;/span&gt;
    updater&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;idle() &lt;span style=&#34;color:#75715e&#34;&gt;#5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;首先根据 token 创建一个 &lt;code&gt;updater&lt;/code&gt; 对象；&lt;/li&gt;
&lt;li&gt;定义 &lt;code&gt;start&lt;/code&gt; 函数，在函数体中实现给发指令的那个 &lt;code&gt;chat_id&lt;/code&gt; 发送消息「Let&amp;rsquo;s start!」，并将这个函数与 &lt;code&gt;start&lt;/code&gt; 指令关联；&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;start&lt;/code&gt; 函数作为 &lt;code&gt;CommandHandler&lt;/code&gt; 添加到 &lt;code&gt;update.dispatcher&lt;/code&gt; 中；&lt;/li&gt;
&lt;li&gt;当前设定的指令开始运作，程序会自动持续地向 Telegram 的服务器发送请求，以实时接收指令；&lt;/li&gt;
&lt;li&gt;等待用户 Control-C 或者进程杀死。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;运行此程序，并与 Bot 对话，执行指令 &lt;code&gt;/start&lt;/code&gt; ，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_1.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;对话&#34;&gt;对话&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; telegram &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Update
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; telegram.ext &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Updater, CallbackContext, CommandHandler, MessageHandler, Filters

token &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2110628450:AAHQ78uj42ddtdsx0gKfaZGyFUhpnQ13vyM&amp;#39;&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;echo&lt;/span&gt;(update: Update, context: CallbackContext):
    context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_message(chat_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;update&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;effective_chat&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id, text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;update&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;message&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text)
    

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    updater &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Updater(token&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;token, use_context&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    echo_handler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MessageHandler(Filters&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Filters&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;command), echo) &lt;span style=&#34;color:#75715e&#34;&gt;#1&lt;/span&gt;
    updater&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dispatcher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_handler(echo_handler) &lt;span style=&#34;color:#75715e&#34;&gt;#2&lt;/span&gt;
    updater&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start_polling()
    updater&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;idle()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将之前的代码稍作修改：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将之前的 &lt;code&gt;start&lt;/code&gt; 函数改为 &lt;code&gt;echo&lt;/code&gt; 函数，其作用是将发给 Bot 的消息发送回来，并将之前的 &lt;code&gt;CommandHandler&lt;/code&gt; 改为 &lt;code&gt;MessageHandler&lt;/code&gt;，这里 &lt;code&gt;Filter&lt;/code&gt; 的作用是过滤文本和非指令信息；&lt;/li&gt;
&lt;li&gt;添加到 &lt;code&gt;dispatcher&lt;/code&gt; 中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;运行此程序，并与 Bot 对话，Bot 会将原话发送回来：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_2.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;指令键盘&#34;&gt;指令键盘&lt;/h3&gt;
&lt;p&gt;关于这一部分，python-telegram-bot 有一个 &lt;a href=&#34;https://github.com/python-telegram-bot/python-telegram-bot/blob/master/examples/inlinekeyboard.py&#34;&gt;例程&lt;/a&gt;，和对应的 &lt;a href=&#34;https://github.com/python-telegram-bot/python-telegram-bot/wiki/InlineKeyboard-Example&#34;&gt;wiki&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; telegram &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; InlineKeyboardButton, InlineKeyboardMarkup, Update
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; telegram.ext &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Updater, CallbackContext, CommandHandler, CallbackQueryHandler

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;(update: Update, context: CallbackContext):
    keyboard &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
        [
            InlineKeyboardButton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Option 1&amp;#34;&lt;/span&gt;, callback_data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;),
            InlineKeyboardButton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Option 2&amp;#34;&lt;/span&gt;, callback_data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;),
        ],
        [
            InlineKeyboardButton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Option 3&amp;#34;&lt;/span&gt;, callback_data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;),
        ]
    ] &lt;span style=&#34;color:#75715e&#34;&gt;#1&lt;/span&gt;
    reply_markup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; InlineKeyboardMarkup(keyboard) &lt;span style=&#34;color:#75715e&#34;&gt;#2&lt;/span&gt;
    update&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;message&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reply_text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please choose:&amp;#34;&lt;/span&gt;, reply_markup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;reply_markup) &lt;span style=&#34;color:#75715e&#34;&gt;#3&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;keyboard_callback&lt;/span&gt;(update: Update, context: CallbackContext): &lt;span style=&#34;color:#75715e&#34;&gt;#4&lt;/span&gt;
    query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; update&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;callback_query &lt;span style=&#34;color:#75715e&#34;&gt;#5&lt;/span&gt;
    query&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;answer() &lt;span style=&#34;color:#75715e&#34;&gt;#6&lt;/span&gt;
    query&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edit_message_text(text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Selected option: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;query&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#7&lt;/span&gt;
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    updater &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Updater(token&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;token, use_context&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    start_handler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CommandHandler(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;, start)
    updater&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dispatcher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_handler(start_handler)
    updater&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dispatcher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_handler(CallbackQueryHandler(keyboard_callback)) &lt;span style=&#34;color:#75715e&#34;&gt;#8&lt;/span&gt;
    updater&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start_polling()
    updater&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;idle()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;同样回到 &lt;code&gt;start&lt;/code&gt; 函数，这次我们更改下 &lt;code&gt;/start&lt;/code&gt; 指令内部逻辑，一开始定义了一个二维数组，我们可以简单地理解为定义了两排按钮，第一排是 &lt;code&gt;Option 1&lt;/code&gt; 和 &lt;code&gt;Option 2&lt;/code&gt;，第二排是 &lt;code&gt;Option 3&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;将其转换为 &lt;code&gt;InlineKeyboardMarkup&lt;/code&gt; 类型以便发送；&lt;/li&gt;
&lt;li&gt;将这个指令键盘作为回复发送；&lt;/li&gt;
&lt;li&gt;定义一个新的函数，作为用户按键盘后的 handler；&lt;/li&gt;
&lt;li&gt;当用户点击按钮，&lt;code&gt;update.callback_query&lt;/code&gt; 中拥有此指令信息，将其定义为 &lt;code&gt;query&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;query&lt;/code&gt; 的 &lt;code&gt;answer()&lt;/code&gt; 方法，即告诉用户「回复」了这条指令，表现为客户端不再显示等待这条指令的 UI；&lt;/li&gt;
&lt;li&gt;将用户选择的值作为一条消息覆盖原来的键盘消息；&lt;/li&gt;
&lt;li&gt;将此 handler 加入 &lt;code&gt;dispatcher&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;运行此程序，并与 Bot 对话，执行指令 &lt;code&gt;/start&lt;/code&gt; ，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_3.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;当点选 &amp;ldquo;Option 1&amp;rdquo; 后，出现 Loading 的提示后，原消息更改为以下结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_4.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;下一步&#34;&gt;下一步&amp;hellip;&lt;/h2&gt;
&lt;p&gt;未完待续&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>我的 M1 Pro 到了</title>
            <link>https://clox.nu/news/2021/11/14/my-new-m1-pro/</link>
            <pubDate>Sun, 14 Nov 2021 18:42:00 +0800</pubDate>
            
            <guid>https://clox.nu/news/2021/11/14/my-new-m1-pro/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;assets/IMG_1.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_2.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_3.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_4.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_5.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_6.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_7.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_8.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_9.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_10.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_11.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_12.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_13.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_14.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_15.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_16.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Telegram Bot 简明教程 I - 注册与发消息</title>
            <link>https://clox.nu/blog/brief-tutorial-on-telegram-bot-i/</link>
            <pubDate>Wed, 10 Nov 2021 00:47:13 +0800</pubDate>
            
            <guid>https://clox.nu/blog/brief-tutorial-on-telegram-bot-i/</guid>
            <description>&lt;p&gt;Telegram Bot，简而言之就是运行在 Telegram 上的可交互的「机器人」，你可以给它发送指令让它完成操作或是实现一些功能（付钱、游戏等等），或者可以在 Channel 或 Group 中发送特定消息。&lt;/p&gt;
&lt;p&gt;这是 &lt;a href=&#34;https://core.telegram.org/bots&#34;&gt;官方介绍&lt;/a&gt;。它的主要原理就是开发者通过调用 &lt;a href=&#34;https://core.telegram.org/bots/api&#34;&gt;Telegram Bot API&lt;/a&gt; 来实现接收指令、发消息以及实现各种功能。&lt;/p&gt;
&lt;h2 id=&#34;注册&#34;&gt;注册&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;与 &lt;a href=&#34;https://t.me/BotFather&#34;&gt;@BotFather&lt;/a&gt; 对话，发送指令 &lt;code&gt;/start&lt;/code&gt; 开始，&lt;code&gt;/newbot&lt;/code&gt; 申请一个新的 Bot 账号。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_1.png&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_2.png&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_3.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;接着，BotFather 会要求你输入这个 Bot 的名字和 ID。创建完成后，BotFather 会同时给你一个 token，记住这个 token。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_4.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;此时，已经可以和这个 Bot 互动了，但是想要这个 Bot 也可以主动发消息，这时就要建立一个 Channel，并把这个 Bot 设置为管理员。这个 Channel 如果是 public，其链接可以自定义。这里以 private 为例。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_5.png&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_6.png&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_7.png&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_8.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;由于 Channel 是 private，我们需要这个 Channel 的 ID 来操作，这里可以通过将 Channel 内的消息转发给 &lt;a href=&#34;https://t.me/JsonDumpBot&#34;&gt;@JsonDumpBot&lt;/a&gt; 来查看。可以看到此 Channel 的 ID 是 &lt;code&gt;-1001790411176&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_9.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;发消息&#34;&gt;发消息&lt;/h2&gt;
&lt;p&gt;在官方文档的 &lt;a href=&#34;https://core.telegram.org/bots/api#making-requests&#34;&gt;Making requests&lt;/a&gt; 介绍中讲到，可以使用 GET 或 POST 请求以下 URL。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://api.telegram.org/bot&amp;lt;token&amp;gt;/METHOD_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同样在官方文档 &lt;a href=&#34;https://core.telegram.org/bots/api#sendmessage&#34;&gt;sendMessage&lt;/a&gt; 介绍中，列出了所有参数列表。在获取到 token 和 Channel ID 后，以下这条链接就是此 Bot 发给刚刚建立的 Channel 一条消息「Hello from robot」的请求。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://api.telegram.org/bot2110628450:AAHQ78uj42ddtdsx0gKfaZGyFUhpnQ13vyM/sendMessage?chat_id=-1001790411176&amp;amp;text=Hello%20from%20robot
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;assets/IMG_10.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们也可以编写以下 Python 程序，运行之后 Bot 同样会在此 Channel 发送一条信息「Hello from robot」。（在此之前需要安装 telegram 依赖 &lt;code&gt;pip install python-telegram-bot&lt;/code&gt;）&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; telegram

bot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; telegram&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Bot(token&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2110628450:AAHQ78uj42ddtdsx0gKfaZGyFUhpnQ13vyM&amp;#39;&lt;/span&gt;)
print(bot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_me())

bot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_message(text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from robot&amp;#34;&lt;/span&gt;, chat_id&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1001790411176&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://python-telegram-bot.readthedocs.io/en/stable/&#34;&gt;python-telegram-bot 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;下一步&#34;&gt;下一步&amp;hellip;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../brief-tutorial-on-telegram-bot-ii/&#34;&gt;Telegram Bot 简明教程 II - 收指令与指令键盘&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/python-telegram-bot/python-telegram-bot&#34;&gt;https://github.com/python-telegram-bot/python-telegram-bot&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
        </item>
        
        <item>
            <title>如何用 Git 命令修改历史提交</title>
            <link>https://clox.nu/blog/how-to-amend-git-history-commit/</link>
            <pubDate>Fri, 05 Nov 2021 16:37:27 +0800</pubDate>
            
            <guid>https://clox.nu/blog/how-to-amend-git-history-commit/</guid>
            <description>&lt;p&gt;在实际工程中，有时我们在以往的提交中忘记提交部分代码，当想起来的时候已经提交过很多笔了。于是想要把当前的更改提交到历史 commit 中去。&lt;/p&gt;
&lt;p&gt;假设当前我们提交了三次：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git log
commit 0e162000e27ba998d5a92cc04b489e3d3ec0e30d &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Author: cloxnu &amp;lt;hi@clox.nu&amp;gt;
Date:   Fri Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 13:46:08 &lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt; +0800

    3rd commit

commit f5f470406634bb255e4f19bf62780868afeed32d
Author: cloxnu &amp;lt;hi@clox.nu&amp;gt;
Date:   Fri Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 13:45:21 &lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt; +0800

    2nd commit

commit cf8c580d322e459fa1acf4ef1e6d08163aeb1a21
Author: cloxnu &amp;lt;hi@clox.nu&amp;gt;
Date:   Fri Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 13:41:30 &lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt; +0800

    1st commit

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这几次提交就只涉及一个文件 &lt;code&gt;1.txt&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cat 1.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;11111111&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;22222222&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;33333333&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中第一行为第一次提交，第二行为第二次提交，第三行为第三次提交。&lt;/p&gt;
&lt;p&gt;此时如果想要将第二次提交增加一个新文件 &lt;code&gt;2.txt&lt;/code&gt;，该怎么操作呢？&lt;/p&gt;
&lt;h2 id=&#34;步骤&#34;&gt;步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先新建 &lt;code&gt;2.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cat 2.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;22222222&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;将当前的更改 stash&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git stash
Saved working directory and index state WIP on master: 0e16200 3rd commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;根据之前 &lt;code&gt;git log&lt;/code&gt; 打印的 commit 信息确定将要更改的 commit hash 值。然后使用 &lt;code&gt;git rebase -i&lt;/code&gt; （没错，这相当于一次 rebase）&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git rebase -i f5f470406634bb255e4f19bf62780868afeed32d^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;⚠️ 注意：这里输入的提交 hash 值后需要加上 &lt;code&gt;^&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，代表这次 commit 的父提交。或者：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git rebase -i cf8c580d322e459fa1acf4ef1e6d08163aeb1a21
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git rebase -i HEAD~2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果此时需要更改第一次提交，因为第一次提交没有父提交，所以应该输入命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git rebase -i --root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;此时会进入 vim，编辑对于这些 commit 需要执行怎样的操作&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pick f5f4704 2nd commit
pick 0e16200 3rd commit

# Rebase cf8c580..0e16200 onto cf8c580 (2 commands)
#
# Commands:
# p, pick &amp;lt;commit&amp;gt; = use commit
# r, reword &amp;lt;commit&amp;gt; = use commit, but edit the commit message
# e, edit &amp;lt;commit&amp;gt; = use commit, but stop for amending
# s, squash &amp;lt;commit&amp;gt; = use commit, but meld into previous commit
# f, fixup &amp;lt;commit&amp;gt; = like &amp;quot;squash&amp;quot;, but discard this commit&#39;s log message
# x, exec &amp;lt;command&amp;gt; = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with &#39;git rebase --continue&#39;)
# d, drop &amp;lt;commit&amp;gt; = remove commit
# l, label &amp;lt;label&amp;gt; = label current HEAD with a name
# t, reset &amp;lt;label&amp;gt; = reset HEAD to a label
# m, merge [-C &amp;lt;commit&amp;gt; | -c &amp;lt;commit&amp;gt;] &amp;lt;label&amp;gt; [# &amp;lt;oneline&amp;gt;]
# .       create a merge commit using the original merge commit&#39;s
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c &amp;lt;commit&amp;gt; to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们当前需要变更第二次 commit，所以应该把第一行的 &lt;code&gt;pick&lt;/code&gt; 改为 &lt;code&gt;edit&lt;/code&gt;，然后 &lt;code&gt;:wq&lt;/code&gt; 保存。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;此时进入这样的画面&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Stopped at f5f4704...  2nd commit
You can amend the commit now, with

  git commit --amend 

Once you are satisfied with your changes, run

  git rebase --continue

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时可以将我们 stash 后的更改 pop 出来&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git stash pop
interactive rebase in progress; onto cf8c580
Last command &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; command &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
   edit f5f4704 2nd commit
Next command to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; remaining command&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
   pick 0e16200 3rd commit
  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git rebase --edit-todo&amp;#34;&lt;/span&gt; to view and edit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
You are currently editing a commit &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; rebasing branch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;master&amp;#39;&lt;/span&gt; on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cf8c580&amp;#39;&lt;/span&gt;.
  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git commit --amend&amp;#34;&lt;/span&gt; to amend the current commit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git rebase --continue&amp;#34;&lt;/span&gt; once you are satisfied with your changes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

Changes to be committed:
  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git restore --staged &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to unstage&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	new file:   2.txt

Dropped refs/stash@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;15fa455ffa846f31167b311c3b7b9314f6c944db&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;提交&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git add .
$ git commit --amend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并确认提交信息。&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;继续进行 rebase&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git rebase --continue
Successfully rebased and updated refs/heads/master.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结束。&lt;/p&gt;
&lt;h2 id=&#34;验证&#34;&gt;验证&lt;/h2&gt;
&lt;p&gt;此时我们看到第二次和第三次的提交的 hash 值都被修改了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git log
commit 9522b421544a86b1fc7be32bac18e889fb57b096 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Author: cloxnu &amp;lt;hi@clox.nu&amp;gt;
Date:   Fri Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 13:46:08 &lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt; +0800

    3rd commit

commit 903242f62a479417f1b3d759b0a64280ea43287b
Author: cloxnu &amp;lt;hi@clox.nu&amp;gt;
Date:   Fri Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 13:45:21 &lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt; +0800

    2nd commit

commit cf8c580d322e459fa1acf4ef1e6d08163aeb1a21
Author: cloxnu &amp;lt;hi@clox.nu&amp;gt;
Date:   Fri Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 13:41:30 &lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt; +0800

    1st commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看第二次提交：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git show HEAD^
commit 903242f62a479417f1b3d759b0a64280ea43287b
Author: cloxnu &amp;lt;hi@clox.nu&amp;gt;
Date:   Fri Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 13:45:21 &lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt; +0800

    2nd commit

diff --git a/1.txt b/1.txt
index ca028fb..71d9a24 &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt;
--- a/1.txt
+++ b/1.txt
@@ -1 +1,2 @@
 &lt;span style=&#34;color:#ae81ff&#34;&gt;11111111&lt;/span&gt;
+22222222
diff --git a/2.txt b/2.txt
new file mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt;
index 0000000..75a1dd2
--- /dev/null
+++ b/2.txt
@@ -0,0 +1 @@
+22222222
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000022506884&#34;&gt;https://segmentfault.com/a/1190000022506884&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
        </item>
        
        <item>
            <title>尝试玩玩 Apple Arcade</title>
            <link>https://clox.nu/news/2021/11/02/apple-arcade/</link>
            <pubDate>Tue, 02 Nov 2021 23:50:00 +0800</pubDate>
            
            <guid>https://clox.nu/news/2021/11/02/apple-arcade/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;assets/IMG_1.png&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_2.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>使用渐进式 JPEG 图片优化 blog 阅读体验</title>
            <link>https://clox.nu/blog/optimizing-blog-experience-with-progressive-jpeg-pictures/</link>
            <pubDate>Sat, 30 Oct 2021 02:14:30 +0800</pubDate>
            
            <guid>https://clox.nu/blog/optimizing-blog-experience-with-progressive-jpeg-pictures/</guid>
            <description>&lt;p&gt;从写好第一篇多图大图的 blog 那一刻起，我就一直在思考访问者如何快速加载这些图片提高阅读体验，因为这些图片动辄几兆甚至几十兆，而我又不希望压缩这些图片导致质量下降。&lt;/p&gt;
&lt;p&gt;所以在以往的多图 blog 中，访问者往往要等待很久的加载时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_1.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;既然是图片大小导致的「硬伤」，加载这些图片几乎都取决于访问者的网速，那么有没有办法从图片本身的角度出发，来优化这种加载时间？&lt;/p&gt;
&lt;h2 id=&#34;什么是渐进式-jpegprogressive-jpeg&#34;&gt;什么是渐进式 JPEG（Progressive JPEG）&lt;/h2&gt;
&lt;p&gt;我们知道，JPEG 格式是目前兼容性最高，使用范围最广的图片有损压缩格式。而其中的编码方式分为多种，这里主要讨论两种：&lt;strong&gt;Baseline JPEG&lt;/strong&gt; 和 &lt;strong&gt;Progressive JPEG&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于 &lt;strong&gt;Baseline JPEG&lt;/strong&gt;，图片是从上到下一行行顺序存储的，因此在加载图片的时候能看到图片从上到下慢慢显现出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_2.gif&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;而 &lt;strong&gt;Progressive JPEG&lt;/strong&gt;，图片会由模糊到清晰渐进式地分多次存储，因此在加载图片时看到的图片是由模糊到清晰渲染的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_3.gif&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图片来自「简书」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种渐进式 JPEG 显然可以在图片未加载完全的时候就能看到它的「预览」，而且渐进式 JPEG 的文件大小要略小于 Baseline JPEG。不过渐进式 JPEG 在 Windows 7 以前的 IE 等浏览器不受支持，会在完全加载完成后才显示图片。&lt;/p&gt;
&lt;p&gt;目前多图 blog 之所以加载时间很长，是因为这些图片存储的编码方式都是 Baseline JPEG。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;🎬&lt;/h2&gt;
&lt;p&gt;于是，我在之前的 GitHub Actions 配置文件中补充了将这些图片转换为 Progressive JPEG 的命令，当前的 blog 在合并入主干分支后 GitHub Actions 会先使用 hugo 命令创建 HTML&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，然后 Progressive JPEG 命令再将所有 JPEG 图片批量处理。&lt;/p&gt;
&lt;p&gt;在 Linux 中，使用 &lt;a href=&#34;https://imagemagick.org/script/index.php&#34;&gt;ImageMagick&lt;/a&gt; 处理图片。其中的 &lt;a href=&#34;https://imagemagick.org/script/command-line-options.php#interlace&#34;&gt;-interlace&lt;/a&gt; 选项有提供将图片转换为 Progressive JPEG。&lt;/p&gt;
&lt;p&gt;起初我使用命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ mogrify -verbose -interlace plane **/*.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;匹配并转换目录下所有后缀为 .jpg 文件并转换为渐进式 JPEG，在我的 macOS Big Sur 中可以正常工作，但是在 GitHub Actions 运行后报错：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mogrify-im6.q16: unable to open image `**/*.jpg&#39;: No such file or directory @ error/blob.c/OpenBlob/2874.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;于是我换了一种思路，可以用 &lt;code&gt;find&lt;/code&gt; 命令先找到所有 JPEG 图片，然后再处理，这行命令就变成了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ find . -type f -exec file --mime-type &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt; | awk -F &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{if ($NF == &amp;#34;image/jpeg&amp;#34;) print $1 }&amp;#39;&lt;/span&gt; | xargs mogrify -verbose -interlace plane
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行后的多图 blog 体验效果：（无本地缓存）&lt;/p&gt;


&lt;video controls src=&#34;assets/video.mov&#34; width=100%&gt;&lt;/video&gt;

&lt;h2 id=&#34;值得优化的地方&#34;&gt;值得优化的地方&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可以不需要每次都转换所有图片，根据 &lt;code&gt;hugo&lt;/code&gt; 命令生成的 HTML 与上一次的 HTML 的 diff，从而转换修改、添加和删去的图片。&lt;/li&gt;
&lt;li&gt;安装 ImageMagick 需要一部分时间，可以尝试用 Docker 容器取代。&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://clox.nu/news/2021/10/25/gh-pages/&#34;&gt;用 GitHub Actions 生成 blog 的 HTML 到 gh-pages 分支&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
        </item>
        
        <item>
            <title>用 GitHub Actions 生成 blog 的 HTML 到 gh-pages 分支</title>
            <link>https://clox.nu/news/2021/10/25/gh-pages/</link>
            <pubDate>Mon, 25 Oct 2021 22:00:09 +0800</pubDate>
            
            <guid>https://clox.nu/news/2021/10/25/gh-pages/</guid>
            <description>&lt;p&gt;由于 blog 生成 HTML 会自动将所有资源复制到生成的目录中，因此将 output 目录放到新的分支中可以防止本地占用「双倍」空间，而且可以防止需要合并远端变更。&lt;/p&gt;
&lt;p&gt;这是我的 GitHub Actions 执行代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This is a basic workflow to help you get started with Actions&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;build creative.clox.nu&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Controls when the workflow will run&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;# Triggers the workflow on push or pull request events but only for the main branch&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;push&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;branches&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;main ]&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;pull_request&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;branches&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;main ]&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# Allows you to run this workflow manually from the Actions tab&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;workflow_dispatch&lt;/span&gt;:

&lt;span style=&#34;color:#75715e&#34;&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;# This workflow contains a single job called &amp;#34;build&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
      &lt;span style=&#34;color:#75715e&#34;&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Checkout main&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span style=&#34;color:#75715e&#34;&gt;# Update theme &lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Update theme&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;git submodule update --init --recursive&lt;/span&gt;

      &lt;span style=&#34;color:#75715e&#34;&gt;# Setup Hugo&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Setup Hugo&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;peaceiris/actions-hugo@v2&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;hugo-version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;
        
      &lt;span style=&#34;color:#75715e&#34;&gt;# Build blog&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Build&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;working-directory&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./src/&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;hugo&lt;/span&gt;
        
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Checkout gh-pages&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          git fetch
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          git checkout gh-pages
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          ls | grep -v docs | grep -v CNAME | xargs rm -r
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          mv docs/* .
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          rm -r docs/&lt;/span&gt;          
      
      &lt;span style=&#34;color:#75715e&#34;&gt;# Commit &amp;amp; Push&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Commit &amp;amp; Push changes&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions-js/push@master&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;github_token&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;branch&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gh-pages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ls | grep -v docs | grep -v CNAME | xargs rm -r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;是指删除不包括 docs 目录和 CNAME 文件的所有非隐藏文件。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>下单了一台 M1 Pro 的 MacBook Pro</title>
            <link>https://clox.nu/news/2021/10/20/buy-new-mbp/</link>
            <pubDate>Wed, 20 Oct 2021 11:40:09 +0800</pubDate>
            
            <guid>https://clox.nu/news/2021/10/20/buy-new-mbp/</guid>
            <description>&lt;p&gt;下单了一台 19 号凌晨发布的 MacBook Pro。&lt;/p&gt;
&lt;p&gt;起初下了 16GB 内存版本的订单，26 号就到货还挺快的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_1.png&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_2.png&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_3.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;后来被同事们强烈建议 32GB，退掉再订 32GB 版本。结果退款需要 5 个工作日😭&lt;/p&gt;
&lt;p&gt;而且发货时间也变长了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_4.png&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_5.png&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_6.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;希望自己能用新电脑创造更多有意义的事情！&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>想写一个 AI 驱动的游戏</title>
            <link>https://clox.nu/news/2021/10/13/ai-game/</link>
            <pubDate>Wed, 13 Oct 2021 22:00:09 +0800</pubDate>
            
            <guid>https://clox.nu/news/2021/10/13/ai-game/</guid>
            <description>&lt;p&gt;想写一种没有输赢、创造类的游戏，这个游戏随机性很强，主要靠 AI；其次它不容易沉迷。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>想做一种永生的机器人</title>
            <link>https://clox.nu/news/2021/10/09/immortal-robot/</link>
            <pubDate>Sat, 09 Oct 2021 15:18:57 +0800</pubDate>
            
            <guid>https://clox.nu/news/2021/10/09/immortal-robot/</guid>
            <description>&lt;p&gt;想做一种永生的机器人，以后可以用我的身份代替我永生，那可太好了。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>如何使用相机拍摄包含精准地理位置信息的照片</title>
            <link>https://clox.nu/blog/add-gps-exif-info-to-camera-photos/</link>
            <pubDate>Thu, 07 Oct 2021 17:00:30 +0800</pubDate>
            
            <guid>https://clox.nu/blog/add-gps-exif-info-to-camera-photos/</guid>
            <description>&lt;h2 id=&#34;heading&#34;&gt;🤔&lt;/h2&gt;
&lt;p&gt;当我们使用手机拍照时，按下快门的那一刻，程序会自动获取当前地理位置，并将其写入照片中。而当我们拥有海量包含地理位置并通过 iCloud 或者 NAS 管理的照片时，这些照片会被程序自动归类，因此可以省去大量整理照片的时间。&lt;/p&gt;
&lt;p&gt;可是当拍照的设备转移到成像质量更好的相机时，我们却很难方便地获取地理位置信息，因为现在大多数的单反/无反相机都不带有 GPS 模块。因此目前这些相机的解决方案是通过手机蓝牙连接来获取 GPS 信息以写入照片。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_0108.jpg&#34; alt=&#34;IMG_0108&#34;&gt;&lt;/p&gt;
&lt;p&gt;在实际使用中，相机需要手机打开对应相机 App 并连接数秒才能更新正确位置，否则相机要么不会写入地理位置，要么写入一个老的地理位置。在拍照时如果总是需要用手机来连接，那一定相当影响拍摄体验。&lt;/p&gt;
&lt;p&gt;于是经过一段时间的思考，找到了一个可行的方案：在拍照期间，可以用含有 GPS 模块的设备（例如手机）记录自己的轨迹信息，此后可以根据照片拍摄时间和这些轨迹信息计算拍摄的地点，因而写入照片 EXIF 信息中。&lt;/p&gt;
&lt;h2 id=&#34;动手&#34;&gt;动手&lt;/h2&gt;
&lt;p&gt;起初，我打算自己实现通过轨迹信息计算拍摄地点的脚本。&lt;/p&gt;
&lt;p&gt;首先通过手机上的轨迹记录软件得到一个 GPX 文件，GPX 文件的数据格式本质上是 XML。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;trk&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    ...
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;trkseg&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;trkpt&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lat=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;30.313094&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lon=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;120.382447&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ele&amp;gt;&lt;/span&gt;8.456302&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ele&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;extensions&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;speed&amp;gt;&lt;/span&gt;0.059180&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/speed&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/extensions&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;hdop&amp;gt;&lt;/span&gt;14.278474&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/hdop&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;vdop&amp;gt;&lt;/span&gt;10.027264&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/vdop&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;course&amp;gt;&lt;/span&gt;-1.000000&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/course&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;time&amp;gt;&lt;/span&gt;2021-05-08T13:31:10Z&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/trkpt&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;trkpt&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lat=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;30.313110&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lon=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;120.382330&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ele&amp;gt;&lt;/span&gt;9.418098&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ele&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;extensions&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;speed&amp;gt;&lt;/span&gt;0.938084&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/speed&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/extensions&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;hdop&amp;gt;&lt;/span&gt;14.331614&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/hdop&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;vdop&amp;gt;&lt;/span&gt;9.951165&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/vdop&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;course&amp;gt;&lt;/span&gt;286.357989&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/course&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;time&amp;gt;&lt;/span&gt;2021-05-08T13:32:06Z&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/trkpt&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/trkseg&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/trk&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类似这样，每个 GPX 文件由 &lt;code&gt;&amp;lt;trk&amp;gt;&lt;/code&gt; 标签对组成，&lt;code&gt;&amp;lt;trk&amp;gt;&lt;/code&gt; 标签对又由 &lt;code&gt;&amp;lt;trkseg&amp;gt;&lt;/code&gt; 标签对组成。事实上在 GPX 记录软件中可以通过暂停、继续在同一个 GPX 文件中记录多个轨迹。因此每个 GPX 文件可以解析出由 &lt;code&gt;TrackSegment&lt;/code&gt; 为单位的多组数据。&lt;/p&gt;
&lt;p&gt;因此，即便有多个 GPX 文件，同样可以解析成以 &lt;code&gt;TrackSegment&lt;/code&gt; 为元的多组数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TrackSegment&lt;/code&gt; 是由一个个 &lt;code&gt;TrackPoint&lt;/code&gt; 组成的，我们假设这些 &lt;code&gt;TrackPoint&lt;/code&gt; 都是按时间顺序排列的（事实上除非人为，否则用 GPX 软件记录下来的轨迹都是按照时间顺序排列的，不过跨越时区的记录可能是个大问题），且没有时间重叠，因此我们可以仅用 &lt;code&gt;TrackSegment&lt;/code&gt; 的第一个 &lt;code&gt;TrackPoint&lt;/code&gt; 的时间（即开始时间）为键，排序所有 &lt;code&gt;TrackSegment&lt;/code&gt;，得到 &lt;code&gt;sortedSegments&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接下来开始遍历照片，取得照片的拍摄时间，然后依据二分法，即可在 &lt;code&gt;O(log n)&lt;/code&gt; 的时间内从包含这些 &lt;code&gt;TrackSegment&lt;/code&gt; 的起始时间和结束时间的数组中轻松找到这个拍摄时间存在于哪个 &lt;code&gt;TrackSegment&lt;/code&gt;，或者不存在于任何一个 &lt;code&gt;TrackSegment&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;不幸的是，相机（可能是部分相机）拍摄的照片的 EXIF 信息里并没有记录时区信息，而 GPX 文件记录了 UTC 时间。&lt;/p&gt;
&lt;p&gt;因此，当遍历到的照片没有找到时区信息时，最好的方法是直接向用户询问这张照片的时区。&lt;/p&gt;
&lt;p&gt;拿到照片的拍摄时间后，若这张照片的拍摄时间不存在于任何一个 &lt;code&gt;TrackSegment&lt;/code&gt;，则不会处理这张照片的任何信息；若找到了这张照片在某一 &lt;code&gt;TrackSegment&lt;/code&gt;，则继续依据二分法找这张图片的拍摄时间是否刚好是某个 &lt;code&gt;TrackPoint&lt;/code&gt; 的时间，或处于两个 &lt;code&gt;TrackPoint&lt;/code&gt; 之间的某一时间点。若刚好是某一 &lt;code&gt;TrackPoint&lt;/code&gt; 的时间则使用对应轨迹点的经纬度和海拔写入照片即可，若处于两个轨迹点之间，则根据相邻两个轨迹点的时间到拍摄时间的比例计算经纬度和海拔数值。&lt;/p&gt;
&lt;h2 id=&#34;exiftool&#34;&gt;exiftool&lt;/h2&gt;
&lt;p&gt;在以往，我一直以为 &lt;a href=&#34;https://exiftool.org&#34;&gt;exiftool&lt;/a&gt; 只是查看和修改一个照片 EXIF 信息的命令行工具，在我正准备在脚本里用这个工具的时候，突然发现这个工具的 &lt;a href=&#34;https://exiftool.org/geotag.html&#34;&gt;Geotagging&lt;/a&gt; 功能，居然出人意料地实现了我想要的功能：可以通过包括 GPX 文件在内的多种 GPS 轨迹文件，自动为一个照片或一个目录下所有照片添加位置信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;Geotag&lt;/code&gt; tag is used to define the GPS track log data. The geotagging feature is activated by assigning the name of a track log file to this tag. As an example, the following command line adds GPS tags to all images in the &amp;ldquo;/Users/Phil/Pictures&amp;rdquo; directory based on GPS positions stored in the track log file &amp;ldquo;track.log&amp;rdquo; in the current directory:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exiftool -geotag=track.log /Users/Phil/Pictures
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;用以上命令即可使某一路径的所有照片在一 GPS 轨迹文件中查找并修改这些照片的 EXIF 信息。在 &lt;code&gt;Geosync&lt;/code&gt; 中同时提到如果 GPS 轨迹或照片未指定时区，则将用当地时区。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Both the GPS and the image times are assumed to be local unless another timezone is specified (unless taken from GPSTimeStamp which is UTC).&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;这无疑完美匹配了我想要的功能。&lt;/p&gt;
&lt;h2 id=&#34;关于坐标系&#34;&gt;关于坐标系&lt;/h2&gt;
&lt;p&gt;GPS 轨迹记录软件记录的经纬度和海拔的标准采用世界大地测量系统（WGS）的最新版本「WGS-84」，而中国大陆法规要求地图提供商使用一种称为 GCJ-02 的坐标系统，它是一种基于 WGS-84 采用一种混淆算法后制定的大地测量系统，因此将测量好的 GPX 轨迹文件导入中国大陆地图提供商的地图中会引起偏差。&lt;/p&gt;
&lt;p&gt;如图是 Google Earth 中深圳地图街道与实际的偏差。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_111.jpg&#34; alt=&#34;深圳地图偏差&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;实际使用&#34;&gt;实际使用&lt;/h2&gt;
&lt;p&gt;在 iOS 设备中我使用「GPX Tracker」来记录轨迹，这是一款开源的软件，GitHub 上有相应关于坐标系的 &lt;a href=&#34;https://github.com/merlos/iOS-Open-GPX-Tracker/issues/192&#34;&gt;issue&lt;/a&gt;，其中提到的解决方案是在 App 中可以使用 Open Street Map 即可查看到没有偏差的路径。&lt;/p&gt;
&lt;p&gt;另外，「我的足迹」App 也可记录轨迹，记录的轨迹同样是 WGS-84 标准，不过将轨迹导入到「我的足迹」中也可看到无偏差的轨迹（可能是 App 主动对轨迹进行了坐标系的转换）。&lt;/p&gt;
&lt;p&gt;我最终使用了「GPS Tracker」，因为它支持 Apple Watch 记录，这样不需要耗费手机的电量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_110.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;记录之后，将照片放在同一目录下，使用如下命令&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/image-20211009193300980.png&#34; alt=&#34;image-20211009193300980&#34;&gt;&lt;/p&gt;
&lt;p&gt;最终生成了拥有位置的照片，效果相当不错。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/image-20211007200446137.png&#34; alt=&#34;image-20211007200446137&#34;&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>购买 iPhone 13 的一天</title>
            <link>https://clox.nu/news/2021/09/25/iphone13/</link>
            <pubDate>Sat, 25 Sep 2021 20:46:15 +0800</pubDate>
            
            <guid>https://clox.nu/news/2021/09/25/iphone13/</guid>
            <description>&lt;p&gt;9 月 17 号那天，我拿到了等了很久的相机，也恰好是那天的前一天，我的 iPhone XR 坏掉了，连 MacBook 恢复模式都一直自己重启。iPhone 13 也恰好在这一天晚上 8 点开售，可是在这天我还没想好要换手机。&lt;/p&gt;
&lt;p&gt;24 号，iPhone 13 开卖了，我才了解到 24-26 号 Apple Store 是只对预约的人开放的，同时这段时间我也意识到 24 号之前在 Apple Store App 里下单是没法选线下取货的（应该是 17 号晚上 8 点把名额抢完了），送货的话要等很久。所以工作人员让我留意一下抢 27 号及以后的线下取货。当时的截图是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_2.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;24 号白天的时候，发现官网的某一页有这么一句话「预约系统的开放时间为每天上午 上午 6:00」。好了，定好闹钟，25 号早上 6 点抢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_3.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;结果早上 6 点的时候，线下取货最开始确实只能选 27 号取货，可是我最想选的 256GB 粉色刚好没有了。在我正纠结颜色的时候，突然取货时间可以选 25 号了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_4.png&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_5.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后从纠结的 512GB 粉改为了 256GB 蓝，预约了 25 号下午 3 点取货。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_6.png&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_7.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;那天下午，到 Apple Store 的时候，在离店很远的地方就需要出示预约二维码，通过一个用围栏围成的长长的过道，才能进入 Apple Store。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_8.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入之后，在一位工作人员的处理下，很快就拿到了 iPhone 13，由于这种特殊的「限流」处理，店内出现了罕见的「工作人员比顾客多」的特殊现象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_9.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_10.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;当时还玩了玩其他设备，mini 是真的小巧&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_11.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_12.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个暗夜色还有一丝丝深蓝色，挺好看的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_13.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后我就开始现场开箱了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_14.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_17.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_16.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后，试了下 iPhone 13 Pro 的微距和电影效果模式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_18.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_19.jpg&#34; alt=&#34;图片&#34;&gt;&lt;img src=&#34;assets/IMG_20.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>我终于拿到了富士 X-S10</title>
            <link>https://clox.nu/news/2021/09/17/fujifilm-xs10/</link>
            <pubDate>Fri, 17 Sep 2021 14:30:42 +0800</pubDate>
            
            <guid>https://clox.nu/news/2021/09/17/fujifilm-xs10/</guid>
            <description>&lt;p&gt;一个月前的 8 月 14 日，我在线下订购了一台富士 X-S10，没想到在一个月后的今天才拿到这款超级缺货的相机📷&lt;/p&gt;
&lt;p&gt;我将使用新的方式记录生活。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_2.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>为 Hugo 站点添加自定义字体</title>
            <link>https://clox.nu/news/2021/09/09/hugo-custom-font/</link>
            <pubDate>Thu, 09 Sep 2021 19:35:14 +0800</pubDate>
            
            <guid>https://clox.nu/news/2021/09/09/hugo-custom-font/</guid>
            <description>&lt;p&gt;今天我把此 Hugo 站点关于 &lt;code&gt;code&lt;/code&gt; 部分的字体改为 Jetbrains Mono，大致进行了以下几步。&lt;/p&gt;
&lt;p&gt;我使用的是 Papermod 主题，其 &lt;a href=&#34;https://github.com/adityatelange/hugo-PaperMod/wiki/FAQs#bundling-custom-css-with-themes-assets&#34;&gt;Wiki&lt;/a&gt; 页面有讲述关于如何加入自定义 css 的方法。&lt;/p&gt;
&lt;p&gt;于是我尝试将用 jsDelivr 加速的 Jetbrains Mono 字体静态加载&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;并生效于 &lt;code&gt;code&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;发布后，网站上并没有生效。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_1.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;进行网页检查后发现，一般的 code 块 css 选择器是 &lt;code&gt;.post-content code&lt;/code&gt; 而我这里只用了 &lt;code&gt;code&lt;/code&gt;，因此我的 &lt;code&gt;font-family&lt;/code&gt; 属性优先级太低了。&lt;/p&gt;
&lt;p&gt;因此解决方式就是在 &lt;code&gt;font-family&lt;/code&gt; 后增加 &lt;code&gt;!important&lt;/code&gt;，或把自定义的 css 的选择器也改为 &lt;code&gt;.post-content code&lt;/code&gt; 即可解决问题。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Albert221/753d7f8955eeb6f5e50486fce048e39f&#34;&gt;https://gist.github.com/Albert221/753d7f8955eeb6f5e50486fce048e39f&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
        </item>
        
        <item>
            <title>我使用 Cloudflare Pages 部署 Hugo 失败了</title>
            <link>https://clox.nu/news/2021/09/09/cloudflare-pages-failed/</link>
            <pubDate>Thu, 09 Sep 2021 10:56:03 +0800</pubDate>
            
            <guid>https://clox.nu/news/2021/09/09/cloudflare-pages-failed/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://pages.cloudflare.com&#34;&gt;Cloudflare Pages&lt;/a&gt; 是一个 Cloudflare 于 2020 年末推出的 &lt;a href=&#34;https://jamstack.org&#34;&gt;Jamstack&lt;/a&gt; 平台。&lt;strong&gt;JAMstack&lt;/strong&gt; 指主要使用 Javascript, API, Markup 的一种安全快速的网站结构。&lt;/p&gt;
&lt;p&gt;在此之前，这个 Hugo 站点是使用 GitHub Pages + Cloudflare CDN 这种方式运作的。于是今天尝试使用 Cloudflare Pages 部署。&lt;/p&gt;
&lt;p&gt;进入官网之后，登录 -&amp;gt; GitHub 授权&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_1.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_2.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_3.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于 Cloudflare Pages 是直接支持了 Hugo，配置阶段简单快速。&lt;/p&gt;
&lt;p&gt;第一次构建失败，日志反映出 theme 内部的 html template 编译错误。&lt;/p&gt;
&lt;p&gt;然后我尝试了指定几个 Hugo 版本，但是最终仍然失败，从日志中看到构建已经成功了，但是部署错误，以收到这条错误告终：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Failed: an internal error occurred
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;assets/IMG_4.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_5.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>使用 iPad Pro 体验 5-5.work</title>
            <link>https://clox.nu/news/2021/09/07/5-5-work/</link>
            <pubDate>Tue, 07 Sep 2021 00:12:12 +0800</pubDate>
            
            <guid>https://clox.nu/news/2021/09/07/5-5-work/</guid>
            <description>&lt;p&gt;我们在 2021 年 6 月发布了 &lt;a href=&#34;https://5-5.work&#34;&gt;无名速递&lt;/a&gt;（原名「五号电池」）的 2.0 版本，今天使用 iPad Pro 体验了一下。&lt;/p&gt;
&lt;p&gt;打开网页&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_1.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;创建房间，名为 1234&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_2.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击魔法棒可以切换主题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_3.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击左上角的链接可以弹出房间二维码，即当前房间的链接&lt;/p&gt;


&lt;video controls width=100%&gt;
    &lt;source src=&#34;assets/qrcode.mov&#34;&gt;
&lt;/video&gt;

&lt;p&gt;可以使用消息框在房间内发消息，其他人也可以看到&lt;/p&gt;


&lt;video controls width=100%&gt;
    &lt;source src=&#34;assets/message.MP4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;在 iPad 上 drag &amp;amp; drop 一张照片可以上传至房间&lt;/p&gt;


&lt;video controls width=100%&gt;
    &lt;source src=&#34;assets/add1photo.MP4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;左上角点击切换布局：列表和网格&lt;/p&gt;


&lt;video controls width=100%&gt;
    &lt;source src=&#34;assets/layout.MP4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;为房间购买电池，免费房间的文件可以存储一周&lt;/p&gt;


&lt;video controls width=100%&gt;
    &lt;source src=&#34;assets/payment.MP4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;drag &amp;amp; drop 多张照片&lt;/p&gt;


&lt;video controls width=100%&gt;
    &lt;source src=&#34;assets/add_photos.MP4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;新建类别&lt;/p&gt;


&lt;video controls width=100%&gt;
    &lt;source src=&#34;assets/add_category.MP4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;多选 &amp;amp; 移动文件到新类别&lt;/p&gt;


&lt;video controls width=100%&gt;
    &lt;source src=&#34;assets/add_photos.MP4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;断开连接时，会有弹框提醒已断开&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_4.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>如何用命令行将 Linux 服务器上的文件备份至 Dropbox</title>
            <link>https://clox.nu/blog/backup-files-on-linux-to-dropbox/</link>
            <pubDate>Wed, 01 Sep 2021 23:02:22 +0800</pubDate>
            
            <guid>https://clox.nu/blog/backup-files-on-linux-to-dropbox/</guid>
            <description>&lt;p&gt;又进入了新的一月，又到了服务器续费的时候。由于我前些天把我的 travel blog 变成静态页面了，因此原本 serve 了它一段时间的服务器也可以注销掉了，不过服务器上还存有一些需要保留的文件，于是今天想把这些文件放到 Dropbox 中。&lt;/p&gt;
&lt;p&gt;参照 &lt;a href=&#34;https://www.dropbox.com/install-linux&#34;&gt;官方安装页面&lt;/a&gt;，先运行以下命令下载并解压 Dropbox。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cd ~ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; wget -O - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.dropbox.com/download?plat=lnx.x86_64&amp;#34;&lt;/span&gt; | tar xzf -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在 home 目录就会产生一个 &lt;code&gt;.dropbox-dist&lt;/code&gt; 目录，同样参照以上官方安装页面，运行这个目录下的 &lt;code&gt;dropboxd&lt;/code&gt; 来启动 Dropbox 守护进程。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ~/.dropbox-dist/dropboxd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我在运行这句命令之后这段程序执行了一些指令后报错。（我使用的是 Ubuntu 20.04 LTS）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_1.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;于是立马在 &lt;a href=&#34;https://www.digitalocean.com/community/questions/how-to-configure-dropbox-on-ubuntu-20-04&#34;&gt;DigitalOcean&lt;/a&gt; 中找到答案，我缺少了一些依赖，运行以下命令解决此问题。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo apt install libc6 libglapi-mesa libxdamage1 libxfixes3 libxcb-glx0 libxcb-dri2-0 libxcb-dri3-0 libxcb-present0 libxcb-sync1 libxshmfence1 libxxf86vm1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装依赖后，运行上述命令，得到以下输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_2.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据提示需要打开 URL 登录自己的账号以绑定这台服务器。打开后界面如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_3.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果自己的 Dropbox 账号是通过 Google 或者 Apple 登录的话，需要先登录自己的账号设置一个密码才能在这里登录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;登录之后，控制台会出现一句话，&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;This computer is now linked to Dropbox. Welcome XXX
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代表登录已经成功了。&lt;/p&gt;
&lt;p&gt;此时 home 目录下已经出现了 &lt;code&gt;Dropbox&lt;/code&gt; 目录，进入之后就可以看见自己 Dropbox 内部存放的文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_4.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;依照官方安装页面，可以通过下载一个 Python 脚本，可以更方便地用命令行控制 Dropbox。运行以下命令&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;来下载 Python 脚本到 &lt;code&gt;/usr/local/bin&lt;/code&gt; 目录，即可快速执行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo wget -O /usr/local/bin/dropbox &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.dropbox.com/download?dl=packages/dropbox.py&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再给它添加执行权限。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo chmod +x /usr/local/bin/dropbox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后运行 &lt;code&gt;dropbox&lt;/code&gt; 命令即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_5.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;dropbox start&lt;/code&gt; 启动守护进程。&lt;code&gt;dropbox status&lt;/code&gt; 查看状态&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;当操作 &lt;code&gt;Dropbox&lt;/code&gt; 目录时，守护进程会将更新的内容自动同步至 Dropbox 云端。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_6.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;在其他设备上也能看到同步的文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_7.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://linoxide.com/install-dropbox-ubuntu/&#34;&gt;https://linoxide.com/install-dropbox-ubuntu/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://help.dropbox.com/zh-cn/installs-integrations/desktop/linux-commands&#34;&gt;https://help.dropbox.com/zh-cn/installs-integrations/desktop/linux-commands&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
        </item>
        
        <item>
            <title>如何在 iPad Pro 上高效地使用 Taio 创建 Hugo blog</title>
            <link>https://clox.nu/blog/how-to-use-taio-efficiently/</link>
            <pubDate>Mon, 30 Aug 2021 23:42:45 +0800</pubDate>
            
            <guid>https://clox.nu/blog/how-to-use-taio-efficiently/</guid>
            <description>&lt;p&gt;本文来自生产力 &lt;a href=&#34;https://clox.nu/posts/productivity/&#34;&gt;ℙ𝕣𝕠𝕕𝕦𝕔𝕥𝕚𝕧𝕚𝕥𝕪&lt;/a&gt; 系列文章。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我们知道，在一台安装了 Hugo 命令行工具的电脑上，只需运行命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ hugo new ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即可创建一个新的 blog。&lt;/p&gt;
&lt;p&gt;为了发挥 iPad Pro 的「生产力」属性，我使用 Taio 的「动作」实现了此命令，因此可以在 iPad Pro 上高效快速地撰写 blog。&lt;/p&gt;
&lt;p&gt;首先使用「Working Copy」拉取 GitHub 上的 blog 远程仓库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_1.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后打开 Taio，将刚刚拉取下来的远程仓库的本地地址添加到 Taio 的「添加的位置」中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_2.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_3.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加完成后，在「动作库」中创建新动作，取名叫「Create a Hugo blog」。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_4.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;以下是一个创建新 blog 的简单版本，运行之后会要求输入 blog 目录名，标题，以及类别，然后会在当前目录下创建这个目录，以及这个目录下的 &lt;code&gt;index.md&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;PS：这里添加到 blog 的当前日期符合 ISO 8601 标准，时间格式为 &lt;code&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ssxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_6.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后将写好的动作拖移到「编辑器」文件夹中，意味着可以在编辑器的快捷动作里运行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_7.gif&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;在某一分类文件夹下的任意文件里，点击右上角的闪电标志，运行「Create a Hugo blog」即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/IMG_5.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用 Taio 写完整篇文章后，最终回到「Working Copy」，Commit &amp;amp; Push 自己的更改。剩下生成 HTML 的环节就交给 Travis CI 或者 GitHub Actions 去完成，详细配置请看 &lt;a href=&#34;https://clox.nu/posts/creation/deployment-based-on-travis-ci/&#34;&gt;使用 Travis CI 自动部署 Hugo 站点&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS：如果你的 GitHub 账号拥有 GitHub Student Developer Pack，则可以不需要为「Working Copy」购买 Pro。&lt;/p&gt;
&lt;p&gt;本文使用 Taio 编辑，且仅使用 iPad Pro 进行发布。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>使用 GitHub Actions 自动部署我的 travel blog 站点</title>
            <link>https://clox.nu/blog/generate-my-travel-blog-by-github-actions/</link>
            <pubDate>Sat, 14 Aug 2021 20:41:00 +0800</pubDate>
            
            <guid>https://clox.nu/blog/generate-my-travel-blog-by-github-actions/</guid>
            <description>&lt;p&gt;前情提要：在我的 travel blog 的仓库根目录下，有一个叫 &lt;code&gt;gotravel&lt;/code&gt; 的文件，运行该文件即可自动生成网站，因此 GitHub Actions 只需要在我每次 push 之后运行这个文件再提交一次就可以了。&lt;/p&gt;
&lt;p&gt;在 GitHub 仓库内点击菜单栏的 Actions，然后选择 set up a workflow yourself&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/image-20210814204920751.png&#34; alt=&#34;image-20210814204920751&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后就会跳转至新建文件页面，以及 GitHub 自动生成最初的 &lt;code&gt;main.yml&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/image-20210814205057441.png&#34; alt=&#34;image-20210814205057441&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This is a basic workflow to help you get started with Actions&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;CI&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Controls when the workflow will run&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;# Triggers the workflow on push or pull request events but only for the master branch&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;push&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;branches&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;master ]&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;pull_request&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;branches&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;master ]&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# Allows you to run this workflow manually from the Actions tab&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;workflow_dispatch&lt;/span&gt;:

&lt;span style=&#34;color:#75715e&#34;&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;# This workflow contains a single job called &amp;#34;build&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
      &lt;span style=&#34;color:#75715e&#34;&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span style=&#34;color:#75715e&#34;&gt;# Runs a single command using the runners shell&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Run a one-line script&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;echo Hello, world!&lt;/span&gt;

      &lt;span style=&#34;color:#75715e&#34;&gt;# Runs a set of commands using the runners shell&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Run a multi-line script&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          echo Add other actions to build,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          echo test, and deploy your project.&lt;/span&gt;          

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改为：（这里使用了 &lt;code&gt;actions-js/push@master&lt;/code&gt; 来 Commit &amp;amp; Push）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This is a basic workflow to help you get started with Actions&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;CI&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Controls when the workflow will run&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;# Triggers the workflow on push or pull request events but only for the master branch&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;push&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;branches&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;master ]&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;pull_request&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;branches&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;master ]&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# Allows you to run this workflow manually from the Actions tab&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;workflow_dispatch&lt;/span&gt;:

&lt;span style=&#34;color:#75715e&#34;&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;# This workflow contains a single job called &amp;#34;build&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
      &lt;span style=&#34;color:#75715e&#34;&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v2&lt;/span&gt;
      
      &lt;span style=&#34;color:#75715e&#34;&gt;# Generate website&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Run generator&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gotravel_linux_arm64&lt;/span&gt;
        
      &lt;span style=&#34;color:#75715e&#34;&gt;# Commit &amp;amp; Push&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Commit &amp;amp; Push changes&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions-js/push@master&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;github_token&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;branch&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;master&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终 build success：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/image-20210814220043703.png&#34; alt=&#34;image-20210814220043703&#34;&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>HackMD 的使用与思考</title>
            <link>https://clox.nu/blog/about-hackmd/</link>
            <pubDate>Tue, 30 Mar 2021 13:41:30 +0800</pubDate>
            
            <guid>https://clox.nu/blog/about-hackmd/</guid>
            <description>&lt;p&gt;本文来自生产力 &lt;a href=&#34;https://clox.nu/posts/productivity/&#34;&gt;ℙ𝕣𝕠𝕕𝕦𝕔𝕥𝕚𝕧𝕚𝕥𝕪&lt;/a&gt; 系列文章。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;说到 Markdown 团队协作，就不得不提到 &lt;a href=&#34;https://hackmd.io/&#34;&gt;HackMD&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我有一段时间在寻找 Markdown 合作 &amp;amp; 同步的过程中，偶然间发现了 HackMD，当时使用了一下，意外地发现相当好用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/hackmd.png&#34; alt=&#34;HackMD&#34;&gt;&lt;/p&gt;
&lt;p&gt;HackMD 支持 MathJax 公式，以下是官方宣传的特色功能：（当时觉得这正是我想要的）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/feature.png&#34; alt=&#34;特色&#34;&gt;&lt;/p&gt;
&lt;p&gt;注册账号登录以后，在个人页面可以建立不同的空间，给不同的文件放置不同的标签。这里的标签就已经起到了分类的作用，所以 HackMD 没有「文件夹」。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/personal.png&#34; alt=&#34;personal&#34;&gt;&lt;/p&gt;
&lt;p&gt;我立马新建了一个团队空间，新建了一个新的笔记，写作页面相当干净简洁，该有的功能都有。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/writing.png&#34; alt=&#34;writing&#34;&gt;&lt;/p&gt;
&lt;p&gt;在团队协作方面，正在编辑这篇文章的人可以同时看见其他协作者正在编辑的位置，编辑一段文字后还可以看见这段文字是谁写的，不同作者用不同颜色表示在这段文字的左边或者下面，如上图编辑页面。&lt;/p&gt;
&lt;p&gt;在「共享」弹窗中还可以修改阅读或编辑这篇文章的权限，URL 以及浏览方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/share.png&#34; alt=&#34;share&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外，GitHub 同步只能绑定一个 GitHub 账号的其中一个仓库中的一个文件，这样每次新建一个文件就得手动在 GitHub 新建一个文件了，如果它可以自动同步并且不同账号可以同步不同 GitHub 账号就好了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/github.png&#34; alt=&#34;GitHub&#34;&gt;&lt;/p&gt;
&lt;p&gt;HackMD 还有大量的功能与操作，这是 &lt;a href=&#34;https://hackmd.io/c/tutorials-tw/%2Fs%2Ftutorials-tw&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>初识 React Native</title>
            <link>https://clox.nu/blog/get-started-with-react-native/</link>
            <pubDate>Mon, 01 Mar 2021 15:15:30 +0800</pubDate>
            
            <guid>https://clox.nu/blog/get-started-with-react-native/</guid>
            <description>&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;由于开发需要，稍稍玩了玩 React Native 开发一个 App 的简要流程。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://reactnative.dev/&#34;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装使用时，可以使用 &lt;a href=&#34;https://expo.io/&#34;&gt;Expo&lt;/a&gt; ，可以省去在 Xcode 或者 Android Studio 配置的过程。&lt;/p&gt;
&lt;p&gt;运行以下命令安装 Expo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;npm install -g expo-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意这里在 &lt;code&gt;npm&lt;/code&gt; 前不要加 &lt;code&gt;sudo&lt;/code&gt;，请提前确保权限通顺&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo chown -R &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;whoami&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; ~/.npm
sudo chown -R &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;whoami&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; /usr/local/lib/node_modules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装好后，我试图运行 Expo，但是得到了 Expo 不支持当前的 Node 版本的错误，于是运行 &lt;code&gt;nvm&lt;/code&gt; 来安装最新版本 Node（以下是未安装 &lt;code&gt;nvm&lt;/code&gt; 的版本）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo npm install -g n
sudo n latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者，使用 &lt;code&gt;yarn&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;yarn global add expo-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;开始&#34;&gt;开始&lt;/h2&gt;
&lt;p&gt;安装好后，生成第一个项目：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;expo init rn_proj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入目录并运行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cd rn_proj
expo start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;assets/start.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后同时会打开一个 Web 控制台&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/web_console.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后在待调试的设备上下载 Expo Go 后扫码即可开始调试&lt;/p&gt;
&lt;p&gt;将 &lt;code&gt;App.js&lt;/code&gt; 中 &lt;code&gt;Text&lt;/code&gt; 标签对里的内容改为 &lt;code&gt;Hello World!&lt;/code&gt; 后&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/coding.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;运行在 iPhone XR 真机上：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/real_device.PNG&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;模拟器运行&#34;&gt;模拟器运行&lt;/h3&gt;
&lt;p&gt;这里我弄了好久一直卡在安装 Expo Go 到模拟器中，看到网络流量情况才发现下载一直没有用代理，macOS 需要开启终端代理才可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;export https_proxy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;http://127.0.0.1:7890 http_proxy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;http://127.0.0.1:7890 all_proxy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;socks5://127.0.0.1:7890
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的端口需要设置为代理的端口，我使用的 Clash 可以自动生成终端代理命令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/running.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;运行于-web&#34;&gt;运行于 Web&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;assets/run_in_web.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;写代码时每当修改保存，只要当前还处于 &lt;code&gt;expo start&lt;/code&gt; 状态，真机或模拟器上的画面就会跟着改变&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;或者直接使用-react-native&#34;&gt;或者直接使用 React Native&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;npx react-native init rn_proj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;yarn react-native init rn_proj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;国内访问记得设置代理&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;npm config set proxy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;http://127.0.0.1:xxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
</description>
        </item>
        
        <item>
            <title>一个奇特的想法 - Site Net</title>
            <link>https://clox.nu/blog/site-net/</link>
            <pubDate>Sat, 20 Feb 2021 11:34:48 +0800</pubDate>
            
            <guid>https://clox.nu/blog/site-net/</guid>
            <description>&lt;p&gt;就在最近两天，我思考到关于如何做一个让知识体系更显而易见的个人网站时，想到了一个可以用一个程序来实现展示各网站关联的点子：类似于一个知识体系的构建，知识点 A 关联到知识点 B，知识点 B 关联到知识点 C，每个站点会指向它内部所含的链接的站点。&lt;/p&gt;
&lt;p&gt;程序写出来之后首先就想要测试的就是 Wikipedia 的词条，经过域名过滤和标题过滤（让链接仅指向 Wikipedia 的站点而不是某些参考文献），原站点指向的站点实在是太多，图片上的字都有点看不清了。（以下是 Python 词条搜索 3,000 次的结果）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/wikipedia.png&#34; alt=&#34;Wikipedia&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后再试了一下 Apple 的中国官网，图比较密集所以将画布放大了一倍&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/apple.png&#34; alt=&#34;Apple&#34;&gt;&lt;/p&gt;
&lt;p&gt;本工程的 &lt;a href=&#34;https://github.com/cloxnu/SiteNet&#34;&gt;GitHub 链接&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>使用 Travis CI 自动部署 Hugo 站点</title>
            <link>https://clox.nu/blog/deployment-based-on-travis-ci/</link>
            <pubDate>Tue, 16 Feb 2021 10:58:54 +0800</pubDate>
            
            <guid>https://clox.nu/blog/deployment-based-on-travis-ci/</guid>
            <description>&lt;p&gt;在 GitHub 仓库内创建 &lt;code&gt;.travis.yml&lt;/code&gt; 文件并添加以下内容后，即可自动部署此 Hugo 站点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;dist&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bionic&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;addons&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;snaps&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;hugo&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;install&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;cd ./src/&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;git submodule update --init --remote&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;hugo -D&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;after_script&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;cd ..&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;git config --global user.name &amp;#34;Travis CI&amp;#34;&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;git config --global user.email &amp;lt;your-email&amp;gt;&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;git remote set-url origin &amp;#34;https://${GITHUB_TOKEN}@github.com/&amp;lt;username&amp;gt;/&amp;lt;repo-name&amp;gt;.git&amp;#34;&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;git checkout main&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;git add .&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;git commit -m &amp;#34;Update Blog By TravisCI With Build $TRAVIS_BUILD_NUMBER&amp;#34;&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;git push origin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;记得在 &lt;a href=&#34;https://travis-ci.com&#34;&gt;travis-ci.com&lt;/a&gt; 网站内添加 &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; 键值，以确认 &lt;code&gt;git push&lt;/code&gt; 能正常运行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install&lt;/code&gt; 内的 &lt;code&gt;cd ./src/&lt;/code&gt; 是针对当前仓库的源码是存于 &lt;code&gt;src&lt;/code&gt; 文件夹内，而 &lt;code&gt;after_script&lt;/code&gt; 中的 &lt;code&gt;cd ..&lt;/code&gt; 是返回根目录的做法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;travis job log:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/travis.png&#34; alt=&#34;travis&#34;&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>关于本站</title>
            <link>https://clox.nu/blog/about-this-site/</link>
            <pubDate>Mon, 15 Feb 2021 00:21:45 +0800</pubDate>
            
            <guid>https://clox.nu/blog/about-this-site/</guid>
            <description>&lt;p&gt;本站使用 Hugo 搭建而成，theme 主要使用 PaperMod，将源仓库 &lt;a href=&#34;https://github.com/adityatelange/hugo-PaperMod&#34;&gt;adityatelange / hugo-PaperMod&lt;/a&gt; fork 到自己的 GitHub 仓库 &lt;a href=&#34;https://github.com/cloxnu/hugo-PaperMod&#34;&gt;cloxnu / hugo-PaperMod&lt;/a&gt; 并手动增加Mathjax 特性后，本站仓库主题使用 git submodule 拉取。&lt;/p&gt;
&lt;p&gt;以下添加 Mathjax 特性过程参考 &lt;a href=&#34;https://note.qidong.name/2018/03/hugo-mathjax/&#34;&gt;https://note.qidong.name/2018/03/hugo-mathjax/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;手动添加文件 &lt;code&gt;layouts/partials/mathjax.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/mathjax.png&#34; alt=&#34;mathjax&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;partials&lt;/code&gt; 目录下的文件 &lt;code&gt;extend_head.html&lt;/code&gt; 添加代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/extend_head.png&#34; alt=&#34;extend_head&#34;&gt;&lt;/p&gt;
&lt;p&gt;即可。&lt;/p&gt;
&lt;h2 id=&#34;顺便在这里提一下-git-submodule-和-git-remote&#34;&gt;顺便在这里提一下 &lt;code&gt;git submodule&lt;/code&gt; 和 &lt;code&gt;git remote&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;在我 fork 了源仓库之后，使用命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git remote add upstream https://github.com/adityatelange/hugo-PaperMod.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;来配置一个 remote，参考 &lt;a href=&#34;https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/configuring-a-remote-for-a-fork&#34;&gt;Configuring a remote for a fork&lt;/a&gt; ，并使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git fetch upstream
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;来同步远程仓库，参考 &lt;a href=&#34;https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork&#34;&gt;Syncing a fork&lt;/a&gt; 。将 Mathjax 特性添加之后，push 到自己 fork 的仓库，随后在本站仓库使用命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git submodule add https://github.com/cloxnu/hugo-PaperMod themes/PaperMod
git submodule init
git submodule update --remote
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即可更新新的带有 Mathjax 特性的 PaperMod 主题了。&lt;/p&gt;
&lt;p&gt;RSS 源参考 &lt;a href=&#34;https://gideonwolfe.com/posts/sysadmin/hugo/hugorss/&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>The Amazing Things</title>
            <link>https://clox.nu/blog/the-amazing-things/</link>
            <pubDate>Sun, 14 Feb 2021 11:53:53 +0800</pubDate>
            
            <guid>https://clox.nu/blog/the-amazing-things/</guid>
            <description>&lt;p&gt;Now, here is another new place to inspire and create amazing things. There is not much space here, but it brings extraordinary encouragement.&lt;/p&gt;
&lt;p&gt;I will always love, and pursue love.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/screenshot.png&#34; alt=&#34;shot&#34;&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Welcome to clox.nu</title>
            <link>https://clox.nu/blog/welcome-to-cloxnu/</link>
            <pubDate>Mon, 08 Feb 2021 20:00:00 +0800</pubDate>
            
            <guid>https://clox.nu/blog/welcome-to-cloxnu/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://clox.nu&#34;&gt;clox.nu&lt;/a&gt; 已全面竣工，欢迎访问&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/safari.png&#34; alt=&#34;safari&#34;&gt;&lt;/p&gt;


&lt;video controls width=100%&gt;
    &lt;source src=&#34;assets/clox.nu.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

</description>
        </item>
        
        <item>
            <title>Generalized Suffix Tree</title>
            <link>https://clox.nu/blog/generalized-suffix-tree/</link>
            <pubDate>Wed, 23 Dec 2020 00:00:00 +0800</pubDate>
            
            <guid>https://clox.nu/blog/generalized-suffix-tree/</guid>
            <description>&lt;p&gt;An implementation of generalized suffix tree using Ukkonen&amp;rsquo;s algorithm.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this page:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-longest-common-substring-problem&#34;&gt;The longest common substring problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-it-works&#34;&gt;How it works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gst-versus-dynamic-programming&#34;&gt;GST versus Dynamic programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Inspired by:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ukkonen, E. On-line construction of suffix trees. Algorithmica 14, 249–260 (1995).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf&#34;&gt;https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-longest-common-substring-problem&#34;&gt;The longest common substring problem&lt;/h2&gt;
&lt;p&gt;Given two or more strings, find the longest common substring of these strings. Concretely, the longest common substring of the two strings &lt;em&gt;&amp;ldquo;cacaocac&amp;rdquo;&lt;/em&gt; and &lt;em&gt;&amp;ldquo;ccaooc&amp;rdquo;&lt;/em&gt; is &lt;em&gt;&amp;ldquo;cao&amp;rdquo;&lt;/em&gt;. This seems like a simple problem, but until today, it still requires a complicated algorithm to be solved in a reasonable time.&lt;/p&gt;
&lt;p&gt;This repo has implemented an algorithm to solve this problem by constructing a tree called Generalized Suffix Tree (GST). GST is a tree structure which contains sets of suffix strings of the origin string. Usually, the string will be appended a unique character &lt;em&gt;&amp;quot;$&amp;quot;&lt;/em&gt; for representing &amp;ldquo;the end&amp;rdquo;, this is to avoid some nodes not splitting due to repeated ending characters.&lt;/p&gt;
&lt;p&gt;There are 2 algorithms for constructing a GST: &lt;strong&gt;McCreight&amp;rsquo;s algorithm (1976)&lt;/strong&gt;, &lt;strong&gt;Ukkonen&amp;rsquo;s algorithm (1995)&lt;/strong&gt;. The latter has been implemented here.&lt;/p&gt;
&lt;p&gt;The visualized GST of &lt;em&gt;&amp;ldquo;cacaocac$&amp;quot;&lt;/em&gt; as follows, made in &lt;a href=&#34;http://brenden.github.io/ukkonen-animation/&#34;&gt;http://brenden.github.io/ukkonen-animation/&lt;/a&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/GST4cacaocac.png&#34; alt=&#34;GST-for-cacaocac&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;
&lt;p&gt;After cloning this repo, we can get the same result by running these codes in the &lt;code&gt;Application.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;tree &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; STree()
tree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;build_with_automatic_end([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cacaocac&amp;#34;&lt;/span&gt;])
print(tree)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and then, something will appear in the console:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cacaocac$ ----&amp;gt; ⊥
c ----&amp;gt; cacaocac$
	a ----&amp;gt; a
		c ----&amp;gt; c
			aocac$ (end)
			$ (end)
		ocac$ (end)
	$ (end)
a ----&amp;gt; cacaocac$
	c ----&amp;gt; c
		aocac$ (end)
		$ (end)
	ocac$ (end)
ocac$ (end)
$ (end)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;cacaocac$&lt;/code&gt; for root, &lt;code&gt;⊥&lt;/code&gt; for auxiliary state&lt;!-- raw HTML omitted --&gt;*&lt;!-- raw HTML omitted --&gt;, &lt;code&gt;----&amp;gt;&lt;/code&gt; for suffix link&lt;!-- raw HTML omitted --&gt;*&lt;!-- raw HTML omitted --&gt;, and a &lt;code&gt;[tab]&lt;/code&gt; represents a deeper level in the tree.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;*&lt;!-- raw HTML omitted --&gt;auxiliary state: The dummy status of the root&amp;rsquo;s suffix link, for convenience in programming.
[Page 3 of the paper for details]&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;*&lt;!-- raw HTML omitted --&gt;suffix link: Used during the construction of a suffix tree.
[Page 4 of the paper for details]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The method &lt;code&gt;_update&lt;/code&gt;, &lt;code&gt;_test_and_split&lt;/code&gt; and &lt;code&gt;_canonize&lt;/code&gt; of the class &lt;code&gt;STree&lt;/code&gt; in &lt;code&gt;STree.py&lt;/code&gt;, are the complete implementation of the procedure of the same name in the page [12] and [13] in the paper, and the method &lt;code&gt;build&lt;/code&gt; corresponds to the [Algorithm 2.] in the page [14].&lt;/p&gt;
&lt;p&gt;But differently, the new &lt;code&gt;end_idxes&lt;/code&gt; property in the &lt;code&gt;STree&lt;/code&gt; contains the indexes of all ending characters &lt;em&gt;&amp;quot;$&amp;quot;&lt;/em&gt;. It avoids effectively the construction bias of the suffix tree when the string contains or is filled with &lt;em&gt;&amp;quot;$&amp;quot;&lt;/em&gt; symbols.&lt;/p&gt;
&lt;p&gt;So, back to the topic, how does this tree solve the longest common substring problem?&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;Application.py&lt;/code&gt;, the &lt;code&gt;lcs2&lt;/code&gt; function find the lcs of two strings. The method &lt;code&gt;build_with_automatic_end&lt;/code&gt; in the &lt;code&gt;STree&lt;/code&gt; will concatenate a list of strings with the ending characters &lt;em&gt;&amp;quot;$&amp;quot;&lt;/em&gt;, and construct a suffix tree. With the help of &lt;code&gt;end_idxes&lt;/code&gt;, these &lt;em&gt;&amp;quot;$&amp;quot;&lt;/em&gt; are different, and they represent the end of different strings. &lt;code&gt;STree&lt;/code&gt; will automatically treat these &lt;em&gt;&amp;quot;$&amp;quot;&lt;/em&gt; as different from other characters, so the character &lt;em&gt;&amp;quot;$&amp;quot;&lt;/em&gt; itself is just designed for readability of suffix tree printing. The &lt;code&gt;lcs2&lt;/code&gt; function will traverse the tree and find the deepest non-leaf node that contains the leaf nodes of all string indexes in the string list.&lt;/p&gt;
&lt;p&gt;Similarly, it can also be demonstrated using the following codes in &lt;code&gt;Application.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;print(lcs2(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cacaocac&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ccaooc&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;print(lcs([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cacaocac&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ccaooc&amp;#34;&lt;/span&gt;]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;lcs&lt;/code&gt; function can find the longest common substring of multiple strings.&lt;/p&gt;
&lt;p&gt;The last two commands have the same result:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cao
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;gst-versus-dynamic-programming&#34;&gt;GST versus Dynamic programming&lt;/h2&gt;
&lt;p&gt;Dynamic programming is another way to solve this problem, and there is always said that the dynamic programming costs $\Theta(mn)$, and the Ukkonen&amp;rsquo;s Algorithm just in linear time. So, let&amp;rsquo;s start an experiment.&lt;/p&gt;
&lt;p&gt;The code in the &lt;code&gt;gst_vs_dp.py&lt;/code&gt;, we randomly generated some strings to examine the performance of the two algorithms.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;len&lt;/code&gt; is the length range of the strings, &lt;code&gt;com_len&lt;/code&gt; is the length range of the common part of the strings.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;len = (800, 1600)&lt;/code&gt; &lt;code&gt;com_len = (100, 200)&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;random string has been generated
gst_res: wTE^s&amp;gt;:x,k~%i3pRtdasZ&amp;gt;eLXrU5gbU#ptQF*?$ta,)k~znS*D/Ja:0L}@.X~i~E~{@NsKlK5c#`4v?v.$O]ts&amp;amp;/LNl&amp;lt;m]ww`Z!4G3vPd:@guRfCuz3DSRNHcVu~[r7s8J`X&amp;amp;/uETtiU[$N0p2.$SV2T&amp;gt;&amp;lt;WTzqLVm:KkC3uE#2SIj63h?3BZYv;G*bl&#39;PnNYhQ0M
dp_res: wTE^s&amp;gt;:x,k~%i3pRtdasZ&amp;gt;eLXrU5gbU#ptQF*?$ta,)k~znS*D/Ja:0L}@.X~i~E~{@NsKlK5c#`4v?v.$O]ts&amp;amp;/LNl&amp;lt;m]ww`Z!4G3vPd:@guRfCuz3DSRNHcVu~[r7s8J`X&amp;amp;/uETtiU[$N0p2.$SV2T&amp;gt;&amp;lt;WTzqLVm:KkC3uE#2SIj63h?3BZYv;G*bl&#39;PnNYhQ0M

gst_time: 12.598991394042969 ms
dp_time: 284.3668460845947 ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;len = (5000, 8000)&lt;/code&gt; &lt;code&gt;com_len = (250, 800)&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;random string has been generated
gst_res: q3U&#39;GCA9;dw}9nrT#R?&amp;quot;odw~HAK,&amp;amp;l;bd}VQ)h`15TAw6K/I1V]#;OSDj%(XmDp[&amp;amp;i}@$k($Bk8X4c&amp;quot;j(rXff9MK:E#`&amp;gt;B&amp;amp;&#39;SF`CgMP&amp;lt;`XOp!8g%&amp;amp;4fpbq&amp;lt;!Q*o4[9W}TXabj4FTele0?~Cm.S,8~)B(U9&amp;lt;m~[1.9/3XGR/@nIt,X3@k}D&amp;quot;U&amp;quot;h@!/C&amp;amp;92s09RU^DLrqo6[}s}Wlr:,VyYX&amp;gt;f{rx&amp;amp;&amp;gt;8bH`VaZy^3pId.A]XO/zgD@26wN:Y23@t(.&amp;gt;3$T6c8?L&#39;l&amp;quot;ZC?0PK,2tWNqa,S&amp;gt;VTe!!%L^n;;up&amp;lt;:Hw;gUtFp^dD]F8&amp;gt;!&#39;}vg^PNK4K&amp;quot;L7X&amp;lt;w;roH:&amp;amp;&amp;lt;jEzZJJPg5qd&#39;J!SWTP%N!CDDaxr7vBX.4@)9OO!Mg;S;M&#39;;VSV]^YZO9ww9k$H;Z^XcXKY@?Naa&amp;lt;jO$LEy`#e1&amp;amp;ywU8Yzq9PNAA^gQ58B?&#39;?)KiKt)$ztM~IrnJ&amp;lt;$;2%%?m&amp;quot;&amp;lt;dme7df&amp;gt;:b?j.A8dM2dH/!K!*o)glG[F&amp;gt;&amp;lt;aZ?c`By5{zEICgq[&amp;lt;M:D&amp;quot;LD;*FPJOzo9o,wXxKz@2];:g$oNrDhc/g{M9z9xTP[FllH/r!YrW!KMG!y(.$mO7Wzj31vMF2&amp;gt;YD?Y&amp;quot;I?t7FX!nWL[S&amp;gt;kLN1Ga7YN&#39;XrG*fxylmtBri/R!0nEGQ3ZG`xQ1o[~Z?1&amp;lt;VKMzKn90J^9#5J&amp;lt;:{3diD*o4Fn.WppQJ7&amp;gt;Z#1cQgV2(GX54S*)0@vQvFs^!/fag#p6kHgwB9{5)u:d9R
dp_res: q3U&#39;GCA9;dw}9nrT#R?&amp;quot;odw~HAK,&amp;amp;l;bd}VQ)h`15TAw6K/I1V]#;OSDj%(XmDp[&amp;amp;i}@$k($Bk8X4c&amp;quot;j(rXff9MK:E#`&amp;gt;B&amp;amp;&#39;SF`CgMP&amp;lt;`XOp!8g%&amp;amp;4fpbq&amp;lt;!Q*o4[9W}TXabj4FTele0?~Cm.S,8~)B(U9&amp;lt;m~[1.9/3XGR/@nIt,X3@k}D&amp;quot;U&amp;quot;h@!/C&amp;amp;92s09RU^DLrqo6[}s}Wlr:,VyYX&amp;gt;f{rx&amp;amp;&amp;gt;8bH`VaZy^3pId.A]XO/zgD@26wN:Y23@t(.&amp;gt;3$T6c8?L&#39;l&amp;quot;ZC?0PK,2tWNqa,S&amp;gt;VTe!!%L^n;;up&amp;lt;:Hw;gUtFp^dD]F8&amp;gt;!&#39;}vg^PNK4K&amp;quot;L7X&amp;lt;w;roH:&amp;amp;&amp;lt;jEzZJJPg5qd&#39;J!SWTP%N!CDDaxr7vBX.4@)9OO!Mg;S;M&#39;;VSV]^YZO9ww9k$H;Z^XcXKY@?Naa&amp;lt;jO$LEy`#e1&amp;amp;ywU8Yzq9PNAA^gQ58B?&#39;?)KiKt)$ztM~IrnJ&amp;lt;$;2%%?m&amp;quot;&amp;lt;dme7df&amp;gt;:b?j.A8dM2dH/!K!*o)glG[F&amp;gt;&amp;lt;aZ?c`By5{zEICgq[&amp;lt;M:D&amp;quot;LD;*FPJOzo9o,wXxKz@2];:g$oNrDhc/g{M9z9xTP[FllH/r!YrW!KMG!y(.$mO7Wzj31vMF2&amp;gt;YD?Y&amp;quot;I?t7FX!nWL[S&amp;gt;kLN1Ga7YN&#39;XrG*fxylmtBri/R!0nEGQ3ZG`xQ1o[~Z?1&amp;lt;VKMzKn90J^9#5J&amp;lt;:{3diD*o4Fn.WppQJ7&amp;gt;Z#1cQgV2(GX54S*)0@vQvFs^!/fag#p6kHgwB9{5)u:d9R

gst_time: 79.45418357849121 ms
dp_time: 10244.915962219238 ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;len = (5000, 8000)&lt;/code&gt; &lt;code&gt;com_len = (250, 800)&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;random string has been generated
gst_res: Hu4XU.if.j/h9DAT3.2RI&amp;quot;9LVeR6qoG}HOB#V[qdN[TQ!%IG#v7l]&#39;4pTA;.G^zhWt%/B0P4ATaG&amp;gt;FDZj?GNH&amp;quot;V%NW(.uL?O.5tJCv6d7[}e.&amp;lt;$SFXv(C&amp;amp;ww&amp;gt;9a&#39;Con(V}MK&amp;lt;exxZ@1.1&amp;lt;7&amp;lt;Wo%wGyjB0FPpcxPLIy^LRZS@c;eel4sUF:iqcGlhz3]z&amp;amp;M&amp;amp;]qk&amp;amp;.H3]vqI7YG)#&amp;amp;}U3sa&amp;quot;6c6H*y{3&amp;gt;9MiHB!W4N1YwR[,qdn:nw$M&amp;quot;g]Ic6S$*[FIzaOZ[fHT&amp;lt;04&amp;lt;$R$[f#.%MscaTy[6?gJ:Qq
dp_res: Hu4XU.if.j/h9DAT3.2RI&amp;quot;9LVeR6qoG}HOB#V[qdN[TQ!%IG#v7l]&#39;4pTA;.G^zhWt%/B0P4ATaG&amp;gt;FDZj?GNH&amp;quot;V%NW(.uL?O.5tJCv6d7[}e.&amp;lt;$SFXv(C&amp;amp;ww&amp;gt;9a&#39;Con(V}MK&amp;lt;exxZ@1.1&amp;lt;7&amp;lt;Wo%wGyjB0FPpcxPLIy^LRZS@c;eel4sUF:iqcGlhz3]z&amp;amp;M&amp;amp;]qk&amp;amp;.H3]vqI7YG)#&amp;amp;}U3sa&amp;quot;6c6H*y{3&amp;gt;9MiHB!W4N1YwR[,qdn:nw$M&amp;quot;g]Ic6S$*[FIzaOZ[fHT&amp;lt;04&amp;lt;$R$[f#.%MscaTy[6?gJ:Qq

gst_time: 63.52519989013672 ms
dp_time: 6668.108701705933 ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;len = (10000, 20000)&lt;/code&gt; &lt;code&gt;com_len = (500, 1000)&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;random string has been generated
gst_res: hee!!i$;hIn8&amp;amp;;Y)bU2BC^Bu{Ek]2}}`SvD&amp;gt;Fj!{%XS#pl6wMh#CDKe&#39;zk%N@mAC]r9[k:g{!Q&amp;lt;B0NQ&amp;quot;#&amp;quot;E&amp;lt;P@in$7]^fkn3tO:5q:lb%!Y5N3[rJBd7I@,6Uf{hNv5o$M%~]~9IS4#ho}]3A&amp;quot;~B9yLF!0&#39;`R(}le0KAMF/J7@EG/d&amp;amp;W/m`XcBt[,Bp0M8m6J]%#mh.^&amp;quot;:CsZw6~!w6eq[)WdAI/&#39;D`Tq.`*t[H5yVEk3mpRKZv&amp;lt;eMZj&#39;R?*zeA,!goeNt&amp;quot;5th.0^LN2xB$wy.*xP(cCW4)zZv#XS.#&amp;lt;&amp;amp;*&amp;quot;spzHfnG:78~P5z%a`Dn1g3&amp;gt;nF5CZm?;EfbKD/(g$!SIAxSRWce&amp;quot;Qf&#39;WbyceqGrh&amp;gt;uhP45R$:h?fJfEFk]@5P{]n2H/KgDGUA~`Q1&#39;&amp;lt;Z}66!s#V&amp;gt;B%&amp;gt;B1L3cIq?;ytc/E?mDmA2;m5LwdI@8)l3@&amp;amp;ZpdKp0&#39;f{VS@ahmmE!f.)kO(nNcVsU?yGEAzu&amp;quot;I/RH:N6&amp;quot;1xFvp~ipR~$7FJ@NLTs[VW^hng1bfc&amp;amp;!ieEbY.)uYN@Ux$(#~]WSyY/alVsiq1uv0u%tVx&#39;kS&amp;gt;x}dkUN5&amp;amp;lY!xy&amp;amp;Y]:wZU;gIXZ&amp;gt;h)mS7,au
dp_res: hee!!i$;hIn8&amp;amp;;Y)bU2BC^Bu{Ek]2}}`SvD&amp;gt;Fj!{%XS#pl6wMh#CDKe&#39;zk%N@mAC]r9[k:g{!Q&amp;lt;B0NQ&amp;quot;#&amp;quot;E&amp;lt;P@in$7]^fkn3tO:5q:lb%!Y5N3[rJBd7I@,6Uf{hNv5o$M%~]~9IS4#ho}]3A&amp;quot;~B9yLF!0&#39;`R(}le0KAMF/J7@EG/d&amp;amp;W/m`XcBt[,Bp0M8m6J]%#mh.^&amp;quot;:CsZw6~!w6eq[)WdAI/&#39;D`Tq.`*t[H5yVEk3mpRKZv&amp;lt;eMZj&#39;R?*zeA,!goeNt&amp;quot;5th.0^LN2xB$wy.*xP(cCW4)zZv#XS.#&amp;lt;&amp;amp;*&amp;quot;spzHfnG:78~P5z%a`Dn1g3&amp;gt;nF5CZm?;EfbKD/(g$!SIAxSRWce&amp;quot;Qf&#39;WbyceqGrh&amp;gt;uhP45R$:h?fJfEFk]@5P{]n2H/KgDGUA~`Q1&#39;&amp;lt;Z}66!s#V&amp;gt;B%&amp;gt;B1L3cIq?;ytc/E?mDmA2;m5LwdI@8)l3@&amp;amp;ZpdKp0&#39;f{VS@ahmmE!f.)kO(nNcVsU?yGEAzu&amp;quot;I/RH:N6&amp;quot;1xFvp~ipR~$7FJ@NLTs[VW^hng1bfc&amp;amp;!ieEbY.)uYN@Ux$(#~]WSyY/alVsiq1uv0u%tVx&#39;kS&amp;gt;x}dkUN5&amp;amp;lY!xy&amp;amp;Y]:wZU;gIXZ&amp;gt;h)mS7,au

gst_time: 164.72983360290527 ms
dp_time: 44179.36301231384 ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Obviously, dynamic programming takes a lot longer time.&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>学校爬电费状态栏 App 的 macOS 开发日记</title>
            <link>https://clox.nu/blog/energy-charge-in-macos/</link>
            <pubDate>Sat, 23 May 2020 00:35:00 +0800</pubDate>
            
            <guid>https://clox.nu/blog/energy-charge-in-macos/</guid>
            <description>&lt;p&gt;Monitoring the energy charge work on macOS in CJLU.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/display.png&#34; alt=&#34;display&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何在没接触过-macos-开发的情况下-4-个小时写一个学校爬电费状态栏-app&#34;&gt;如何在没接触过 macOS 开发的情况下 4 个小时写一个学校爬电费状态栏 App&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloxnu/Energy_Charge_in_MacOS&#34;&gt;GitHub链接-Energy_Charge_in_MacOS&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;about-energy_charge&#34;&gt;About Energy_Charge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; There is &lt;a href=&#34;https://github.com/cloxnu/Energy_Charge&#34;&gt;Docker version&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2020-05-23-0035-更新&#34;&gt;2020-05-23 00:35 更新&lt;/h3&gt;
&lt;p&gt;连接错误变灰&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/conn_err.jpg&#34; alt=&#34;conn_err&#34;&gt;&lt;/p&gt;
&lt;p&gt;低电费变红&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/charge_low.jpg&#34; alt=&#34;charge_low&#34;&gt;&lt;/p&gt;
&lt;p&gt;其他寝室&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/other_room.jpg&#34; alt=&#34;other_room&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;缘起&#34;&gt;缘起&lt;/h2&gt;
&lt;p&gt;学校寝室里配了台台式，写了大半学期的 iOS，这一切都如此顺利。&lt;/p&gt;
&lt;p&gt;不过就在刚刚，一位大佬朋友突然向我展示了他找到的查寝室电费网址 POST 参数。这不禁让我陷入了思考（因为平常我得经常看着点电费不然没电费了电脑黑屏警告233）。然后我顺便查了下我们寝室的电费，nm只有 1 块 5 了！！！&lt;/p&gt;
&lt;p&gt;开发一个 macOS 的爬电费 App 就这样开始了。&lt;/p&gt;
&lt;p&gt;&amp;mdash;- 四个小时前&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;hardworking&#34;&gt;Hardworking&amp;hellip;&lt;/h2&gt;
&lt;p&gt;Xcode - File - New - Project&amp;hellip;&lt;/p&gt;
&lt;p&gt;然后选择 macOS App，这一切看起来如此自然，然而第一个困扰我的出现了 &amp;mdash; url request 如何实现。&lt;/p&gt;
&lt;p&gt;一向喜欢用第三方库的我，果不其然又发现了一个好用的 url request 库，它叫 Alamofire。这个库用来写请求超级超级容易，不过我完全不知道请求完成后得到的 request 应该怎么用，后来找到它的文档这里&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/Alamofire.png&#34; alt=&#34;alamofire&#34;&gt;&lt;/p&gt;
&lt;p&gt;噢，原来我获得的就是这个网址的 JSON 数据，我只需要使用官方的 JSONSerialization 类就行了，于是我就写成了下面这样，把 JSON 转换 NSDictionary 一层层不断获取，成功得到了电费数值，并将它们写到一个类里去，加了一些代理以便其他类能够得到电费变更通知或错误通知。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/code.png&#34; alt=&#34;code&#34;&gt;&lt;/p&gt;
&lt;p&gt;可能你们都看到了，我设定了一个定时器每隔 5 分钟获取一次数据（虽然不知道会不会有电脑睡眠断定时器之类的问题毕竟这是1.0版本不想考虑那么多），于是我寻思还需要增加一个手动更新数据的位置，而且查看数据肯定要一个方便的位置，emmmm，就状态栏吧，看那么多应用都在上面应该没啥问题。。。&lt;/p&gt;
&lt;p&gt;于是，第二个难点。。。如何在状态栏显示内容。&lt;/p&gt;
&lt;p&gt;其实了解之后还是很简单，在 Storyboard 加一个菜单列表就行了，然后在一个新的类里把这个菜单设为状态栏菜单。看起来挺简单吧，操作起来也挺简单的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;assets/storyboard.png&#34; alt=&#34;storyboard&#34;&gt;&lt;/p&gt;
&lt;p&gt;好了，四个小时过去了，这个小插件其实很简单，但自己也学到了不少。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;成型&#34;&gt;成型&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;assets/display.png&#34; alt=&#34;display&#34;&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Archive</title>
            <link>https://clox.nu/archive/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>https://clox.nu/archive/</guid>
            <description></description>
        </item>
        
        <item>
            <title>Search</title>
            <link>https://clox.nu/search/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>https://clox.nu/search/</guid>
            <description></description>
        </item>
        
    </channel>
</rss>